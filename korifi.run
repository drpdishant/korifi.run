#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
korifi.run_usage() {
  if [[ -n $long_usage ]]; then
    printf "korifi.run - Quick Setup script for installing Korifi Environment\n"
    echo

  else
    printf "korifi.run - Quick Setup script for installing Korifi Environment\n"
    echo

  fi

  printf "Usage:\n"
  printf "  korifi.run [command]\n"
  printf "  korifi.run [command] --help | -h\n"
  printf "  korifi.run --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  check   Check system for prerequsites"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  ROOT_NAMESPACE"
    printf "    Root namespace for installing Cloudfoundry Controller\n"
    printf "    Default: cf\n"
    echo

    # :environment_variable.usage
    echo "  ADMIN_USERNAME"
    printf "    Admin Username to access Cloudfoundry\n"
    printf "    Default: cf-admin\n"
    echo

    # :environment_variable.usage
    echo "  BASE_DOMAIN"
    printf "    Base domain to configure the endpoints\n"
    printf "    Default: korifi.run\n"
    echo

  fi
}

# :command.usage
korifi.run_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "korifi.run check - Check system for prerequsites\n"
    echo

  else
    printf "korifi.run check - Check system for prerequsites\n"
    echo

  fi

  printf "Usage:\n"
  printf "  korifi.run check\n"
  printf "  korifi.run check --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
korifi.run_check_command() {
  # src/check_command.sh
  echo "# this file is located in 'src/check_command.sh'"
  echo "# code for 'korifi.run check' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  printf "Checking pre-requisites for OS: $ostype and Arch: $architype \n"

  [[ check_docker ]] && printf "âœ… ${CONSOLE_GREEN} Docker installed\n ${CONSOLE_NORMAL}"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    korifi.run_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  export ROOT_NAMESPACE="${ROOT_NAMESPACE:-cf}"
  export ADMIN_USERNAME="${ADMIN_USERNAME:-cf-admin}"
  export BASE_DOMAIN="${BASE_DOMAIN:-korifi.run}"
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  check )
    action="check"
    shift
    korifi.run_check_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    korifi.run_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
korifi.run_check_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    korifi.run_check_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="check"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

  CONSOLE_NORMAL=$'\e[0m'
  CONSOLE_BLACK=$'\e[30m'
  CONSOLE_RED=$'\e[31m'
  CONSOLE_GREEN=$'\e[32m'
  CONSOLE_YELLOW=$'\e[33m'
  CONSOLE_BLUE=$'\e[34m'
  CONSOLE_MAGENTA=$'\e[35m'
  CONSOLE_CYAN=$'\e[36m'
  CONSOLE_WHITE=$'\e[37m'

  check_os () {
      architecture=`uname -m`
      ostype=`uname -s | tr '[:upper:]' '[:lower:]'`
  }
  check_os
  check_docker () {
      which docker
  }
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "check" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      korifi.run_check_usage
    else
      korifi.run_check_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
